name: ScenarioTest

on:
  workflow_dispatch:
  schedule:
    - cron: 0 0 * * *
  pull_request:
    paths-ignore:
      - "docs/**"
      - "mkdocs.yml"
      - "README.md"

jobs:
  job1:
    name: ScenarioTest
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2-beta

      - name: Install ROS2 via Debian Packages
        run:
          | # https://index.ros.org/doc/ros2/Installation/Foxy/Linux-Install-Debians/
          sudo apt update
          sudo apt install locales
          sudo locale-gen en_US en_US.UTF-8
          sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
          export LANG=en_US.UTF-8
          sudo apt update
          sudo apt install curl gnupg2 lsb-release
          curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=$(dpkg --print-architecture)] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list'
          sudo apt update
          sudo apt install ros-foxy-desktop

      - name: Install lcov
        run: |
          sudo apt install wget
          mkdir -p ~/ros2_ws
          cd ~/ros2_ws
          wget https://gitlab.com/autowarefoundation/autoware.auto/AutowareAuto/-/raw/master/.lcovrc

      - name: Copy repository
        run: |
          mkdir -p ~/ros2_ws/src/scenario_simulator_v2
          cp -rf . ~/ros2_ws/src/scenario_simulator_v2

      - name: Install dependencies
        run: |
          source /opt/ros/foxy/setup.bash
          sudo apt install -y python3-pip python3-rosdep2 python3-vcstool python3-colcon-common-extensions
          rosdep update
          cd ~/ros2_ws
          vcs import src < src/scenario_simulator_v2/dependency_foxy.repos

      - name: Clone autoware packages
        run: |
          cd ~/ros2_ws/src
          mv -v autoware/awapi/autoware_api_msgs              ./
          mv -v autoware/common/msgs/autoware_control_msgs    ./
          mv -v autoware/common/msgs/autoware_debug_msgs      ./
          mv -v autoware/common/msgs/autoware_perception_msgs ./
          mv -v autoware/common/msgs/autoware_planning_msgs   ./
          mv -v autoware/common/msgs/autoware_system_msgs     ./
          mv -v autoware/common/msgs/autoware_vehicle_msgs    ./
          rm -rf autoware

      - name: Resolve rosdep
        run: |
          cd ~/ros2_ws
          rosdep install -iry --from-paths src --rosdistro foxy

      - name: Build packages
        run: |
          source /opt/ros/foxy/setup.bash
          cd ~/ros2_ws
          colcon build --symlink-install --ament-cmake-args -DCMAKE_CXX_FLAGS="-fprofile-arcs -ftest-coverage -DCOVERAGE_RUN=1" --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo
          lcov --config-file .lcovrc --base-directory ${PWD} --capture --directory build -o lcov.base --initial

      - name: Scenario test
        run: |
          source ~/ros2_ws/install/setup.bash
          ros2 launch scenario_test_runner scenario_test_runner.launch.py workflow:='$(find-pkg-share scenario_test_runner)/workflow_example.yaml'
          ros2 run scenario_test_runner result_checker /tmp/scenario_test_runner/result.junit.xml

      - name: Collect coverage
        run: |
          cd ~/ros2_ws
          lcov --config-file .lcovrc --base-directory ${PWD} --capture --directory build -o lcov.test
          lcov --config-file .lcovrc -a lcov.base -a lcov.test -o lcov.total
          lcov --config-file .lcovrc -r lcov.total "*/build/*" "*/install/*" "*/test/*" "*/src/vendor/*" "*/CMakeCCompilerId.c" "*/CMakeCXXCompilerId.cpp" "*_msgs/*" -o lcov.total.filtered

      - name: publish codevov result
        uses: codecov/codecov-action@v1.2.1
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # only needed for private repos
          files: /home/runner/ros2_ws/lcov.total.filtered
          flags: scenario_test
          name: scenario_simulator_v2

      - name: Notify Slack
        uses: 8398a7/action-slack@v2
        if: failure()
        with:
          status: ${{ job.status }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
