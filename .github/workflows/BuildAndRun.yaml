name: Build and run

on:
  workflow_dispatch:
  schedule:
    - cron: 0 0 * * *
  pull_request:
    paths:
      - "**"
      - "!docs/**"
      - "!README.md"
      - "!CONTRIBUTING.md"
      - "!.github/**"
      - ".github/workflows/BuildAndRun.yaml"
      - "!mkdocs.yml"
      - "!pyproject.toml"
      - "!poetry.lock"
  push:
    branches:
      - master
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  job1:
    name: BuildAndRun
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 180
    container: ros:${{ matrix.rosdistro }}
    env:
      DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: false
      matrix:
        rosdistro: [humble]
        runs_on: [ubuntu-22.04, ubuntu-22.04-arm]
        cmake_build_type: [RelWithDebInfo, Release] # Debug build type is currently unavailable. @TODO Fix problem and add Debug build.
    steps:
# workaround until the fix release in the official ros image
      - name: Delete old ros2 apt source
        run: |
          rm /etc/apt/sources.list.d/ros2-latest.list
          rm /usr/share/keyrings/ros2-latest-archive-keyring.gpg

      - name: Setup new ros2 apt source
        run: |
          sudo apt-get update && sudo apt-get install curl
          export ROS_APT_SOURCE_VERSION=$(curl -s https://api.github.com/repos/ros-infrastructure/ros-apt-source/releases/latest | grep -F "tag_name" | awk -F\" '{print $4}')
          curl -L -o /tmp/ros2-apt-source.deb "https://github.com/ros-infrastructure/ros-apt-source/releases/download/${ROS_APT_SOURCE_VERSION}/ros2-apt-source_${ROS_APT_SOURCE_VERSION}.$(. /etc/os-release && echo $VERSION_CODENAME)_all.deb" 
          sudo apt install /tmp/ros2-apt-source.deb
      
      - name: Suppress warnings
        run: git config --global --add safe.directory '*'

      - name: Setup workspace
        run: mkdir -p src/scenario_simulator_v2

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: src/scenario_simulator_v2

      - uses: actions/checkout@v4
        with:
          repository: RobotecAI/scenario_simulator_v2_scenarios
          path: src/scenario_simulator_v2_scenarios

      - name: Search packages in this repository
        id: list_packages
        run: |
          echo package_list=$(colcon list --names-only | tr '\n' ' ') >> $GITHUB_OUTPUT

      - name: Show target packages
        run: |
          echo "Target packages: ${{ steps.list_packages.outputs.package_list }}"

      - name: Install dependencies
        run: |
          vcs import src < src/scenario_simulator_v2/dependency_${{ matrix.rosdistro }}.repos

      - name: Resolve rosdep and install colcon mixin
        run: |
          apt-get update
          apt-get install -y python3-pip python3-colcon-lcov-result lcov unzip gcovr
          pip3 install xmlschema==3.4.5 # xmlschema workaround (4.x occurs errors)
          rosdep update --include-eol-distros
          rosdep install -iy --from-paths src --rosdistro ${{ matrix.rosdistro }}
          colcon mixin add default https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml
          colcon mixin update default
        shell: bash

      - name: Install Build Wrapper
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v4.2.1
        id: build_wrapper
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Build with SonarCloud Build Wrapper
        # Note: `-Wno-error=class-memaccess` is temporary workaround for aarch64 GCC error
        # This should be removed when Eigen is updated in Ubuntu package repository
        # See also: https://gitlab.com/libeigen/eigen/-/issues/2326
        run: |
          source /opt/ros/${{ matrix.rosdistro }}/setup.bash
          ${{ steps.build_wrapper.outputs.build-wrapper-binary }} --out-dir src/scenario_simulator_v2/bw-output \
          colcon build --symlink-install \
          --cmake-args \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            -DBUILD_CPP_MOCK_SCENARIOS=ON \
            -DBUILD_TESTING=true \
            -DCMAKE_CXX_FLAGS='-fprofile-arcs -ftest-coverage -Wno-error=class-memaccess' \
            -DCMAKE_C_FLAGS='-fprofile-arcs -ftest-coverage' \
            --packages-up-to ${{ steps.list_packages.outputs.package_list }}
        shell: bash

      - name: Colcon test
        # ARM testing is currently broken
        if: matrix.runs_on != 'ubuntu-22.04-arm'
        run: |
          source /opt/ros/${{ matrix.rosdistro }}/setup.bash
          source install/local_setup.bash
          colcon test --event-handlers console_cohesion+ --packages-select ${{ steps.list_packages.outputs.package_list }}
          colcon lcov-result --packages-select ${{ steps.list_packages.outputs.package_list }}
        shell: bash

      - name: generate gcov report for sonarcloud
        if: matrix.runs_on != 'ubuntu-22.04-arm'
        run: gcovr -r src/scenario_simulator_v2 build --sonarqube coverage.xml

      - name: Show test result
        if: always()
        run: |
          source /opt/ros/${{ matrix.rosdistro }}/setup.bash
          source install/local_setup.bash
          colcon test-result --verbose
        shell: bash

      - name: Scenario test
        if: matrix.runs_on != 'ubuntu-22.04-arm'
        run: |
          source install/setup.bash
          source install/local_setup.bash
          ./src/scenario_simulator_v2/.github/workflows/workflow.sh ./src/scenario_simulator_v2/test_runner/scenario_test_runner/config/workflow.txt global_frame_rate:=20
        shell: bash

      - name: Scenario test (optional)
        id: optional-scenario-test
        if: matrix.runs_on != 'ubuntu-22.04-arm'
        run: |
          source install/setup.bash
          source install/local_setup.bash
          # execute scenarios but ignore the return code
          ./src/scenario_simulator_v2/.github/workflows/workflow.sh ./src/scenario_simulator_v2/test_runner/scenario_test_runner/config/optional_workflow.txt global_frame_rate:=20 || true
          ./src/scenario_simulator_v2/.github/workflows/generate_workflow_report.sh /tmp/scenario_workflow/optional_workflow
          echo failure=$(grep -c "<failure"  /tmp/scenario_workflow/optional_workflow/failure_report.md) >> $GITHUB_OUTPUT
        shell: bash

      - uses: actions/github-script@v7
        if: steps.optional-scenario-test.outputs.failure > 0 && matrix.runs_on != 'ubuntu-22.04-arm'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let commentBody = fs.readFileSync('/tmp/scenario_workflow/optional_workflow/failure_report.md', 'utf8');
            if (commentBody) {
              commentBody = '## Failure optional scenarios\n> [!NOTE]\n> This is an experimental check and does not block merging the pull-request. \n> But, please be aware that this may indicate a regression.\n' + commentBody;
            }
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            })

      - name: Upload Lcov result
        uses: actions/upload-artifact@v4
        if: matrix.runs_on != 'ubuntu-22.04-arm'
        with:
          name: lcov-${{ matrix.cmake_build_type }}
          path: lcov
          retention-days: 1

      - name: Upload Gcov result
        uses: actions/upload-artifact@v4
        if: matrix.runs_on != 'ubuntu-22.04-arm'
        with:
          name: coverage${{ matrix.cmake_build_type }}.xml
          path: coverage.xml
          retention-days: 1

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4.2.1
        # In ARM build, SonarQube result should be same as x86 build because no test runs
        if: matrix.runs_on != 'ubuntu-22.04-arm'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            --define sonar.cfamily.compile-commands="src/scenario_simulator_v2/bw-output/compile_commands.json"
          projectBaseDir: src/scenario_simulator_v2/
#      - name: Basic test
#        run: |
#          source install/setup.bash
#          source install/local_setup.bash
#          ./src/scenario_simulator_v2/.github/workflows/workflow.sh ./src/scenario_simulator_v2_scenarios/workflow/basic.txt
#        shell: bash
