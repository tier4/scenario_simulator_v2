syntax = "proto3";

import "autoware_vehicle_msgs.proto";
import "builtin_interfaces.proto";
import "geometry_msgs.proto";
import "traffic_simulator_msgs.proto";

package simulation_api_schema;

/**
 * Result of the request
 **/
message Result {
  bool success = 1;       // If true, the request was succeeded
  string description = 2; // Description of why the request was failed.
}

/**
 * Parameter configuration of the lidar sensor
 **/
message LidarConfiguration {
  string entity = 1;                   // Name of the entity which you want to attach lidar.
  double horizontal_resolution = 2;    // Horizontal resolutions of the lidar.
  repeated double vertical_angles = 3; // Vertical resolutions of the lidar.
  double scan_duration = 4;            // Scan duration of the lidar.
  string architecture_type = 5;        // Autoware architecture type.
}

/**
 * Parameter configuration of the detection sensor
 **/
message DetectionSensorConfiguration {
  string entity = 1;             // Name of the entity which you want to attach detection sensor.
  double update_duration = 2;    // Update duration of the detection sensor.
  string architecture_type = 3;  // Autoware architecture type.
}

/**
 * Updated entity status by the simulator.
 **/
message UpdatedEntityStatus {
  string name = 1;                                  // Name of the entity.
  traffic_simulator_msgs.ActionStatus action_status = 2; // Action status of the entity.
  geometry_msgs.Pose pose = 3;                      // Pose of the entity in the map coordinate.
}

/**
 * Requests initializing simulation.
 **/
message InitializeRequest {
  double realtime_factor = 1; // Realtime factor of the simulation.
  double step_time = 2;       // Step time of the simulation.
}

/**
 * Result of initializing simulation.
 **/
message InitializeResponse {
  Result result = 1; // Result of [InitializeRequest](#InitializeRequest)
}

/**
 * Requests updating simulation frame.
 **/
message UpdateFrameRequest {
  double current_time = 1;                      // Current simulation time
  builtin_interfaces.Time current_ros_time = 2; // Current ROS time
}

/**
 * Response of updating simulation frame.
 **/
message UpdateFrameResponse {
  Result result = 1; // Result of [UpdateFrameRequest](#UpdateFrameRequest)
}

/**
 * Requests spawning vehicle entity.
 **/
message SpawnVehicleEntityRequest {
  traffic_simulator_msgs.VehicleParameters parameters = 1; // Parameters of vehicle entity.
  bool is_ego = 2;                                    // If true, the entity is Ego vehicle. (Autoware vehicle.)
}

/**
 * Response of spawning vehicle entity.
 **/
message SpawnVehicleEntityResponse {
  Result result = 1; // Result of [SpawnVehicleEntityResponse](#SpawnVehicleEntityResponse)
}

/**
 * Requests spawning pedestrian entity.
 **/
message SpawnPedestrianEntityRequest {
  traffic_simulator_msgs.PedestrianParameters parameters = 1; // Parameters of pedestrian entity.
}

/**
 * Response of spawning vehicle entity.
 **/
message SpawnPedestrianEntityResponse {
  Result result = 1; // Result of [SpawnPedestrianEntityResponse](#SpawnPedestrianEntityResponse)
}

/**
 * Requests spawning misc object entity
 **/
message SpawnMiscObjectEntityRequest {
  traffic_simulator_msgs.MiscObjectParameters parameters = 1; // Parameters of misc object entity.
}

/**
 * Response of spawning misc object entity
 **/
message SpawnMiscObjectEntityResponse {
  Result result = 1; // Result of [SpawnPedestrianEntityResponse](#SpawnPedestrianEntityResponse)
}

/**
 * Requests despawning entity.
 **/
message DespawnEntityRequest {
  string name = 1; // Name of the entity you want to despawn.
}

/**
 * Response of despawning entity.
 **/
message DespawnEntityResponse {
  Result result = 1; // Result of [DespawnEntityRequest](#DespawnEntityRequest)
}

/**
 * Requests updating entity status.
 **/
message UpdateEntityStatusRequest {
  repeated traffic_simulator_msgs.EntityStatus status = 1;                 // List of updated entity status in traffic simulator.
  autoware_vehicle_msgs.VehicleCommand vehicle_command = 2;                // Ego Vehicle Command of from Autoware
  traffic_simulator_msgs.EntityStatus ego_entity_status_before_update = 3; // Entity status of ego entity before running vehicle model
  bool ego_entity_status_before_update_is_empty = 4;                       // If True,ego entity status before update is empty.
}

/**
 * Response of updating entity status.
 **/
message UpdateEntityStatusResponse {
  Result result = 1;                       // Result of [UpdateEntityStatusRequest](#UpdateEntityStatusRequest)
  repeated UpdatedEntityStatus status = 2; // List of updated entity status in sensor/dynamics simulator.
}

/**
 * Requests attaching a lidar sensor to the target entity.
 **/
message AttachLidarSensorRequest {
  LidarConfiguration configuration = 1; // Configuration of the lidar sensor.
}

/**
 * Response of attaching a lidar sensor to the target entity.
 **/
message AttachLidarSensorResponse {
  Result result = 1; // Result of [AttachLidarSensorRequest](#AttachLidarSensorRequest)
}

/**
 * Requests attaching detection sensor to the target entity.
 **/
message AttachDetectionSensorRequest {
  DetectionSensorConfiguration configuration = 1; // Configuration of the detection sensor.
}

/**
 * Response of attaching detection sensor to the target entity.
 **/
message AttachDetectionSensorResponse {
  Result result = 1; // Result of [AttachDetectionSensorRequest](#AttachDetectionSensorRequest)
}

/**
 * Requests updating a frame of sensor simulation.
 **/
message UpdateSensorFrameRequest {
  double current_time = 1;                      // Current simulation timestamp.
  builtin_interfaces.Time current_ros_time = 2; // Current ROS time
}

/**
 * Response of updating a frame of sensor simulation.
 **/
message UpdateSensorFrameResponse {
  Result result = 1; // Result of [UpdateSensorFrameRequest](#UpdateSensorFrameRequest)
}


message TrafficLightState {
  message LampState {
    enum State {
      UNKNOWN = 0;
      RED = 1;
      GREEN = 2;
      YELLOW = 3;
      LEFT = 4;
      RIGHT = 5;
      UP = 6;
      DOWN = 7;
    }
    State type = 1;
    float confidence = 2;
  }
  int32 id = 1;
  repeated LampState lamp_states = 2;
}

/**
 * Requests updating traffic lights in simulation.
 **/
message UpdateTrafficLightsRequest {
  repeated TrafficLightState states = 1;
}

/**
 * Response of updating traffic lights in simulation.
 **/
message UpdateTrafficLightsResponse {
  Result result = 1; // Result of [DespawnEntityRequest](#DespawnEntityRequest)
}
